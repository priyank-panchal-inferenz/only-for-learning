"""
Django settings for Api project.

Generated by 'django-admin startproject' using Django 3.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '35rdfi-o4pxzc$@pa5-s$9_4v^t1vm7$93g4ii5%&3(l+q-9^w'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]

ENVIRONMENT = "local"

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third-party packages
    'rest_framework',
    # 'rest_framework_swagger',
    'rest_framework.authtoken',
    'corsheaders',
    'django_filters',
    'django_cron',
    # 'multiselectfield',

    # Custom apps
    'mirror',
    'subscription',
    'jewellery',
    'watch',
    'django_celery_results',
    'django_celery_beat',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    # 'django_session_timeout.middleware.SessionTimeoutMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'mirror.middlewares.tenant_middleware'
]

CRON_CLASSES = [
    'cron.subscription_status_cron.SubscriptionStatusCron'),
    "cron.subscription_status_cron.ExpiredPaymentLinks"
]

ROOT_URLCONF = 'Api.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),
            os.path.join(BASE_DIR, 'build'), ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'mirror.custom_context_processor.dynamic_logos',
            ],
        },
    },
]

WSGI_APPLICATION = 'Api.wsgi.application'

AUTH_USER_MODEL = 'mirror.CompanyUser'
# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': str(BASE_DIR / 'db.sqlite3'),
    }
}

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql_psycopg2',
#         'NAME': 'selfstylo_dev',
#         'USER': 'dev',
#         'PASSWORD': 'Inferenz@123',
#         'HOST': 'localhost',
#         'PORT': '',
#     }
# }

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

CORS_ORIGIN_ALLOW_ALL = True
# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Kolkata'

USE_I18N = True

USE_L10N = True

USE_TZ = True


MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'build/static'),
    os.path.join(BASE_DIR, 'static'),
]

SESSION_EXPIRE_SECONDS = 3600 * 4

SESSION_EXPIRE_AFTER_LAST_ACTIVITY = False

SESSION_TIMEOUT_REDIRECT = 'login/'

X_FRAME_OPTIONS = 'ALLOWALL'

XS_SHARING_ALLOWED_METHODS = ['POST','GET','OPTIONS', 'PUT', 'DELETE']

# SMTP settings
EMAIL_BACKEND ='django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_USE_TLS = True
EMAIL_PORT = 587
EMAIL_HOST_USER = 'support@inferenz.ai'
EMAIL_HOST_PASSWORD = 'vpgrlcoceqsvsnbk'


# CELERY SETTINGS
CELERY_BROKER_URL = 'redis://127.0.0.1:6379'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TASK_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Asia/Kolkata'

CELERY_RESULT_BACKEND = 'django-db'

#CELERY BEAT
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

# Razorpay test keys
RAZORPAY_KEY_ID = 'rzp_test_4FgCD3Bf8rZzar'
RAZORPAY_KEY_SECRET = "1AjBFcJ0mNrmvIWvVo5yPy5s"

# Razorpay api header for test
RAZORPAY_API_HEADERS = {
  'Authorization': 'Basic cnpwX3Rlc3RfNEZnQ0QzQmY4clp6YXI6MUFqQkZjSjBtTnJtdklXdlZvNXlQeTVz'
}

TYPES = [
    ('makeup', 'Makeup'),
    ('jewellery', 'Jewellery'),
    ('watches', 'Watches')
]

MAKEUP_TYPES = [
    ('Eyeshadow', 'Eyeshadow'),
    ('Lipstick', 'Lipstick'),
    ('Blush', 'Blush'),
    ('Eyeliner', 'Eyeliner'),
    ('Eyebrows', 'Eyebrows'),
    ('Kajal', 'Kajal'),
    ('Foundation', 'Foundation')
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
        # 'mirror.auth.SubscriptionAuthentication'
    ],
    # 'DEFAULT_RENDERER_CLASSES': [
    #     'rest_framework.renderers.JSONRenderer',
    # ],
    # 'DEFAULT_PARSER_CLASSES': [
    #     'rest_framework.parsers.JSONParser',
    #     'rest_framework.parsers.FormParser',
    #     'rest_framework.parsers.MultiPartParser'
    # ]
}

# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'formatters': {
#         'verbose': {
#             'format': '{levelname} {asctime} {module} {message}',
#             'style': '{',
#         },
#         'simple': {
#             'format': '{message}',
#             'style': '{',
#         },
#     },
#     'handlers': {
#         'simple_file': {
#             'class': 'logging.handlers.TimedRotatingFileHandler',
#             'filename': 'logs/debug.log',
#             'when': 'D',
#             'interval': 1,
#             'formatter': 'simple',
#         },
#         'verbose_file': {
#             'class': 'logging.handlers.TimedRotatingFileHandler',
#             'filename': 'logs/error.log',
#             'when': 'D',
#             'interval': 1,
#             'formatter': 'verbose',
#         },
#     },
#     'loggers': {
#         'info_logger': {
#             'handlers': ['simple_file'],
#             'level': 'INFO',
#         },
#         'error_logger': {
#             'handlers': ['verbose_file'],
#             'level': 'ERROR',
#         },
#     },
# }

TIME= 12*60*60
SESSION_EXPIRE_AT_BROWSER_CLOSE= False
SESSION_COOKIE_AGE = TIME
SESSION_IDLE_TIMEOUT = TIME

try:
    from .local_settings import *
except ImportError as e:
    pass

BASE_URL_PROTOCOL = 'http://'
BASE_URL = 'localhost:3000'

if ENVIRONMENT == 'production':
    BASE_URL_PROTOCOL = 'https://'
    BASE_URL = 'selfstylo.com'
    
    
    
    
    ----------------------------
    
    from django_cron import CronJobBase, Schedule
from datetime import date
from django.utils import timezone
from django.core.mail import send_mail
from Api import settings
from subscription.models import Subscription, SubscriptionStatus ,SubscriptionPaymentMapping
from django.db.models import Q
from django.template.loader import render_to_string
from django.utils.html import strip_tags
import time
import logging
# Logger variables to be used for loggings
info_logger = logging.getLogger('info_logger')
error_logger = logging.getLogger('error_logger')

class SubscriptionStatusCron(CronJobBase):
    RUN_EVERY_MINS = 60 * 24 # every 24 hours

    schedule = Schedule(run_every_mins=RUN_EVERY_MINS)
    code = 'cron.subscription_status_cron'    # a unique code

    def do(self):
        active_subscription = Subscription.objects.filter(status__status__iexact = "Active")
        get_today_date = date.today()
        base_url = settings.BASE_URL_CELERY
        for active in active_subscription:
            if active.end_date > get_today_date:
                remain_days = (active.end_date - get_today_date).days
                subject = "Your plan has been expired within the " + str(remain_days) + " days"
                if (remain_days == 7 or remain_days == 5 or 
                    remain_days == 3):
                    message = render_to_string("email/account_expiry.html",
                                                {"days":remain_days , 
                                                "name":active.company_id , 
                                                "BASE_URL":base_url })   
                    remove_html_tages = strip_tags(message)
                    time.sleep(1) 
                    send_mail(subject=subject , message=remove_html_tages  
                                ,from_email=settings.EMAIL_HOST_USER
                            ,recipient_list=[active.company_id.email]
                            ,html_message=message)
                elif remain_days == 1:
                    message = render_to_string('email/account_expiry_1.html',
                                            {    "days":remain_days
                                                ,"name":active.company_id  
                                                ,"BASE_URL":base_url })
                    remove_html_tages = strip_tags(message)
                    time.sleep(1) 
                    send_mail(subject=subject , message=remove_html_tages
                            ,from_email=settings.EMAIL_HOST_USER ,recipient_list=[active.company_id.email]
                            ,html_message=message) 

            elif active.end_date < get_today_date:
                expire_days = (get_today_date - active.end_date).days
                if expire_days >= 30:
                    get_status, _ = SubscriptionStatus.objects.get_or_create(status = "Inactive")
                    Subscription.objects.filter(id = active.id).update(status = get_status)
                elif expire_days == 1:
                    get_status, _ = SubscriptionStatus.objects.get_or_create(status = "Expired")
                    Subscription.objects.filter(id = active.id).update(status = get_status)
                    # get render the template
                    message = render_to_string('email/account_expired.html',{   
                                                                "name":active.company_id , 
                                                                "BASE_URL":base_url})
                    remove_html_tages = strip_tags(message)
                    time.sleep(1) 
                    expired_subject="Your plan has been Expired."
                    send_mail(expired_subject, message=remove_html_tages
                            ,from_email=settings.EMAIL_HOST_USER
                            ,recipient_list=[active.company_id.email]
                            ,html_message=message)
                    # Preactive subscription now being activate.
                    pre_subscription = Subscription.objects.filter(Q(company_id=active.company_id)
                                                                & Q(status__status__iexact='Pre Active'))
                    # if exists Pre active plan status has been changed to Active.
                    if pre_subscription.exists():
                        get_active = SubscriptionStatus.objects.filter(status__iexact = "Active")
                        pre_subscription.update(status = get_active)
        
        


class ExpiredPaymentLinks(CronJobBase):
    RUN_EVERY_MINS = 2  # every 1 hours

    schedule = Schedule(run_every_mins=RUN_EVERY_MINS)
    code = 'cron.expired_payment_links'    # a unique code

    def do(self):
       
        get_active_links = SubscriptionPaymentMapping.objects.filter(is_active = True)
        for active_link in get_active_links:
            get_duration = (timezone.now() - active_link.created_at)
            if (get_duration.seconds // 3600) >= 23:
                active_link.is_active = False
                active_link.save()    

